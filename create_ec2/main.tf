data "aws_ami" "ubuntu_ami" {    //Fetching the most recent AMI of Ubuntu 20.04 LTS (Focal Fossa) from AWS
  most_recent      = true        //Ensures that the most recent AMI matching the filter criteria is selected.
  filter {                      
    name   = "name"                                                        //This is the tag key being filtered by
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]   // This is the pattern for the AMI name
  }
  owners = ["099720109477"]                                                // Canonical's AWS account ID, the publisher of Ubuntu

}
resource "tls_private_key" "rsa" {  //KeyPair type: Generate a 4096-bit RSA private key				
  algorithm = "RSA"                 //RSA is type of algorithm
  rsa_bits  = 4096                  //Key size
}
resource "aws_key_pair" "deployer" {  // Creating a key pair using the public key generated by the "tls_private_key" block			
  key_name = var.key_name             // The name of the key pair in AWS
  public_key = tls_private_key.rsa.public_key_openssh // Uses the public key generated by the tls_private_key resource		
}
resource "local_file" "save_key_pair" {	    //To save the private key to a local file on your machine. 										
  content  = tls_private_key.rsa.private_key_openssh    //The content to be written to the file, which is the private key in OpenSSH format.					
  filename = var.key_path                               // The path where the private key will be saved
}
resource "aws_security_group" "allow_ssh" {   // Specifying Security Group name
  name = var.sg_name
}
resource "aws_vpc_security_group_ingress_rule" "allow_ssh_ipv4" { //Creating Inbound rules
  security_group_id = aws_security_group.allow_ssh.id  //Associates this ingress rule with the security group created in the previous block
  cidr_ipv4         = "0.0.0.0/0" //Allows traffic from any IPv4 address
  from_port         = 22      //Specifies the starting port of the allowed range, which is port 22
  ip_protocol       = "tcp"   //Specifying the protocol
  to_port           = 22      //Specifies the ending port of the allowed range, which is also port 22 (SSH)
}
resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" { //Creating Outbound rules
  security_group_id = aws_security_group.allow_ssh.id  //Associates this engress rule with the security group created in the previous block
  cidr_ipv4         = "0.0.0.0/0"   //Allows traffic to any IPv4 address.
  ip_protocol       = "-1" //Specifies all protocols. The value -1 indicates that all IP protocols are allowed.
}
resource "aws_instance" "create_ec2" {		   //Creating EC2 instance						 
	ami = data.aws_ami.ubuntu_ami.id	         //Calling AMI ID's data source block (aws_ami)
    instance_type = var.instance_type        //Specifies the instance type
	key_name = aws_key_pair.deployer.key_name  //Calling Key pair's resource block (aws_key_pair)
	vpc_security_group_ids = [aws_security_group.allow_ssh.id]  // Calling Security group's resource block (aws_security_group)
	tags = {                                  //Assigns tags to the instance
		Name = "terraform-ec2"
	}
}
